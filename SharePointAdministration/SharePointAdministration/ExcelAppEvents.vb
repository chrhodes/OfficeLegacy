Option Strict Off
Option Explicit On 

Imports Microsoft.Office.Core
Imports Microsoft.Office.Interop
Imports Microsoft.Practices.EnterpriseLibrary.Logging
Imports Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation
Imports Microsoft.Practices.EnterpriseLibrary.Logging.Filters

Public Class ExcelAppEvents
    '$*******************************************************************************
    '
    ' $Workfile: ExcelAppEvents.vb $
    ' $Revision: 1 $
    ' Class Name:   ExcelEvents     (ProgID = <ProjectNameSpace>.ExcelEvents)
    '
    ' Description:
    '   This class provides dummy handlers for all events generated by Excel.
    '   Other events that interact with Excel, e.g. Toolbars, etc. may be placed
    '   in this class or a class named ExcelXYZ, ExcelCBarEvents.
    '
    ' Implements:
    '
    ' Public Methods:
    '   Method(arg1, arg2) As Type
    '
    ' Friend Methods:
    '
    ' Public Properties:
    '
    ' Usage:
    '   Describe basic usage.
    '
    ' ToDo:
    '   Ideas for enhancements.
    '
    ' $History: ExcelAppEvents.vb $
'
'*****************  Version 1  *****************
'User: Crhodes      Date: 2/20/07    Time: 12:19p
'Created in $/Excel_Addin_With_Task_Panes_Template/Excel_Addin_With_Task_Panes_Template
    ' 
    '$$******************************************************************************

    '**********************************************************************
    '   E x t e r n a l    F u n c t i o n    D e c l a r a t i o n s
    '**********************************************************************
    ' Put these in modGlobals.bas

    '**********************************************************************
    '   I m p l e m e n t s    D e c l a r a t i o n s
    '**********************************************************************

    '**********************************************************************
    '
    '   P  U  B  L  I  C
    '
    '**********************************************************************

    '**********************************************************************
    '   P u b l i c    C o n s t a n t s
    '**********************************************************************
    ' Put these in modGlobals.bas


    '**********************************************************************
    '   P u b l i c    T y p e s    a n d    V a r i a b l e s
    '**********************************************************************
    ' Put these in modGlobals.bas


    '**********************************************************************
    '   P u b l i c    E v e n t s
    '**********************************************************************

    ' This catches the events from the application
    Public WithEvents ExcelAppEvent As Microsoft.Office.Interop.Excel.Application

    'Public WithEvents ExcelAction1 As Microsoft.Office.Core.CommandBarButton

    '**********************************************************************
    '
    '   P  R  I  V  A  T  E
    '
    '**********************************************************************

    '**********************************************************************
    '   P r i v a t e    C o n s t a n t s
    '**********************************************************************

    Private Const cMODULE_NAME As String = Globals.cPROJECT_NAME & ".ExcelAppEvents"

    '**********************************************************************
    '   P r i v a t e    T y p e s    a n d    V a r i a b l e s
    '**********************************************************************

    '**********************************************************************
    '
    '   M  E  T  H  O  D  S
    '
    '**********************************************************************

    '************************************************************
    '   P u b l i c    P r o p e r t i e s
    '************************************************************

    '************************************************************
    '   P u b l i c    M e t h o d s
    '************************************************************

    '************************************************************
    '   I m p l e m e n t s    M e t h o d s
    '************************************************************

    '************************************************************
    '   InterFaceName   P r o p e r t i e s
    '************************************************************

    '************************************************************
    '   InterFaceName   M e t h o d s
    '************************************************************

    '************************************************************
    '   F r i e n d      M e t h o d s
    '************************************************************

    '************************************************************
    '   P r i v a t e      M e t h o d s
    '************************************************************

    Private Sub ExcelAppEvent_NewWorkbook(ByVal Wb As Microsoft.Office.Interop.Excel.Workbook) Handles ExcelAppEvent.NewWorkbook
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_NewWorkBook: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_SheetActivate(ByVal Sh As Object) Handles ExcelAppEvent.SheetActivate
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_SheetActivate: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_SheetBeforeDoubleClick(ByVal Sh As Object, ByVal Target As Microsoft.Office.Interop.Excel.Range, ByRef Cancel As Boolean) Handles ExcelAppEvent.SheetBeforeDoubleClick
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_SheetBeforeDoubleClick: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_SheetBeforeRightClick(ByVal Sh As Object, ByVal Target As Microsoft.Office.Interop.Excel.Range, ByRef Cancel As Boolean) Handles ExcelAppEvent.SheetBeforeRightClick
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_SheetBeforeRightClick: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_SheetCalculate(ByVal Sh As Object) Handles ExcelAppEvent.SheetCalculate
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_SheetCalculate: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_SheetChange(ByVal Sh As Object, ByVal Target As Microsoft.Office.Interop.Excel.Range) Handles ExcelAppEvent.SheetChange
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_SheetChange: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_SheetDeactivate(ByVal Sh As Object) Handles ExcelAppEvent.SheetDeactivate
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_SheetDeactivate: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_SheetFollowHyperlink(ByVal Sh As Object, ByVal Target As Microsoft.Office.Interop.Excel.Hyperlink) Handles ExcelAppEvent.SheetFollowHyperlink
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_SheetFollowHyperLink: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_SheetPivotTableUpdate(ByVal Sh As Object, ByVal Target As Microsoft.Office.Interop.Excel.PivotTable) Handles ExcelAppEvent.SheetPivotTableUpdate
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_SheetPivotTableUpdate: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_SheetSelectionChange(ByVal Sh As Object, ByVal Target As Microsoft.Office.Interop.Excel.Range) Handles ExcelAppEvent.SheetSelectionChange
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_SheetSelectionChange: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_WindowActivate(ByVal Wb As Microsoft.Office.Interop.Excel.Workbook, ByVal Wn As Microsoft.Office.Interop.Excel.Window) Handles ExcelAppEvent.WindowActivate
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_WindowActivate: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_WindowDeactivate(ByVal Wb As Microsoft.Office.Interop.Excel.Workbook, ByVal Wn As Microsoft.Office.Interop.Excel.Window) Handles ExcelAppEvent.WindowDeactivate
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_WindowDeactivate: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_WindowResize(ByVal Wb As Microsoft.Office.Interop.Excel.Workbook, ByVal Wn As Microsoft.Office.Interop.Excel.Window) Handles ExcelAppEvent.WindowResize
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_WindowResize: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_WorkbookActivate(ByVal Wb As Microsoft.Office.Interop.Excel.Workbook) Handles ExcelAppEvent.WorkbookActivate
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_WorkbookActivate: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_WorkbookAddinInstall(ByVal Wb As Microsoft.Office.Interop.Excel.Workbook) Handles ExcelAppEvent.WorkbookAddinInstall
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_WorkbookAddinInstall: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_WorkbookAddinUninstall(ByVal Wb As Microsoft.Office.Interop.Excel.Workbook) Handles ExcelAppEvent.WorkbookAddinUninstall
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_WorkbookAddinUninstall: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_WorkbookBeforeClose(ByVal Wb As Microsoft.Office.Interop.Excel.Workbook, ByRef Cancel As Boolean) Handles ExcelAppEvent.WorkbookBeforeClose
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_WorkbookBeforeClose: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_WorkbookBeforePrint(ByVal Wb As Microsoft.Office.Interop.Excel.Workbook, ByRef Cancel As Boolean) Handles ExcelAppEvent.WorkbookBeforePrint
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_WorkbookBeforePrint: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_WorkbookBeforeSave(ByVal Wb As Microsoft.Office.Interop.Excel.Workbook, ByVal SaveAsUI As Boolean, ByRef Cancel As Boolean) Handles ExcelAppEvent.WorkbookBeforeSave
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_WorkbookBeforeSave: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_WorkbookDeactivate(ByVal Wb As Microsoft.Office.Interop.Excel.Workbook) Handles ExcelAppEvent.WorkbookDeactivate
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_WorkbookDeactivate: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_WorkbookNewSheet(ByVal Wb As Microsoft.Office.Interop.Excel.Workbook, ByVal Sh As Object) Handles ExcelAppEvent.WorkbookNewSheet
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_WorkbookNewSheet: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_WorkbookOpen(ByVal Wb As Microsoft.Office.Interop.Excel.Workbook) Handles ExcelAppEvent.WorkbookOpen
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_WorkbookOpen: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_WorkbookPivotTableCloseConnection(ByVal Wb As Microsoft.Office.Interop.Excel.Workbook, ByVal Target As Microsoft.Office.Interop.Excel.PivotTable) Handles ExcelAppEvent.WorkbookPivotTableCloseConnection
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_WorkbookPivotTableCloseConnection: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_WorkbookPivotTableOpenConnection(ByVal Wb As Microsoft.Office.Interop.Excel.Workbook, ByVal Target As Microsoft.Office.Interop.Excel.PivotTable) Handles ExcelAppEvent.WorkbookPivotTableOpenConnection
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_WorkbookPivotTableOpenConnection: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_WorkbookAfterXmlExport(ByVal Wb As Microsoft.Office.Interop.Excel.Workbook, ByVal Map As Microsoft.Office.Interop.Excel.XmlMap, ByVal Url As String, ByVal Result As Microsoft.Office.Interop.Excel.XlXmlExportResult) Handles ExcelAppEvent.WorkbookAfterXmlExport
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_WorkbookAfterXmlExport: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_WorkbookAfterXmlImport(ByVal Wb As Microsoft.Office.Interop.Excel.Workbook, ByVal Map As Microsoft.Office.Interop.Excel.XmlMap, ByVal IsRefresh As Boolean, ByVal Result As Microsoft.Office.Interop.Excel.XlXmlImportResult) Handles ExcelAppEvent.WorkbookAfterXmlImport
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_WorkbookAfterXmlImport: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_WorkbookBeforeXmlExport(ByVal Wb As Microsoft.Office.Interop.Excel.Workbook, ByVal Map As Microsoft.Office.Interop.Excel.XmlMap, ByVal Url As String, ByRef Cancel As Boolean) Handles ExcelAppEvent.WorkbookBeforeXmlExport
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_WorkbookBeforeXmlExport: " & i, "AppEvents")
    End Sub

    Private Sub ExcelAppEvent_WorkbookBeforeXmlImport(ByVal Wb As Microsoft.Office.Interop.Excel.Workbook, ByVal Map As Microsoft.Office.Interop.Excel.XmlMap, ByVal Url As String, ByVal IsRefresh As Boolean, ByRef Cancel As Boolean) Handles ExcelAppEvent.WorkbookBeforeXmlImport
        Static i As Short
        i = i + 1
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_WorkbookBeforeXmlImport: " & i, "AppEvents")
    End Sub

    ' ToDo: Signature generation not working for WorkbookSync.
    ' Go look up correct signature.
    'Private Sub ExcelAppEvent_WorkbookSync(ByVal Wb As Microsoft.Office.Interop.Excel.Workbook, ByVal SyncEventType As <bad name>) Handles ExcelAppEvent.WorkbookSync
    '    Static i As Short
    '    i = i + 1
    '    Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "_WorkbookSync: " & i)
    'End Sub

    Public Sub New()
        ' Point the logging code to our configuration file.
        'Log.Logging.ConfigFile = Globals.LOGGING_CONFIGFILE
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "-New", "ObjectLifetime")
    End Sub

    '----------------------------------------------------------------------
    '
    ' $Name        :Finalize$
    ' $Type        :Protected Sub$
    '
    ' $Arguments   :$
    '
    ' $Description :$
    '
    ' $ToDo        :$
    '
    '----------------------------------------------------------------------

    Protected Overrides Sub Finalize()
        'Log.Logging.Log(Log.Severity.Verbose, cMODULE_NAME & "-Finalize", "ObjectLifetime")
        MyBase.Finalize()
    End Sub

    '********************************************************************************
    ' End $Workfile: ExcelAppEvents.vb $
    '     $Revision: 1 $
    '********************************************************************************

End Class