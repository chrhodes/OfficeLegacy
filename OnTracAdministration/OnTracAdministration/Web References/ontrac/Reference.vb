'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3053.
'
Namespace ontrac
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="UserGroupSoap", [Namespace]:="http://schemas.microsoft.com/sharepoint/soap/directory/")>  _
    Partial Public Class UserGroup
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetUserCollectionFromSiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserCollectionFromWebOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllUserCollectionFromWebOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserCollectionFromGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserCollectionFromRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserCollectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddUserToGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddUserCollectionToGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddUserToRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddUserCollectionToRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateUserInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveUserFromSiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveUserCollectionFromSiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveUserFromWebOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveUserFromGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveUserCollectionFromGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveUserFromRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveUserCollectionFromRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGroupCollectionFromSiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGroupCollectionFromWebOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGroupCollectionFromRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGroupCollectionFromUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGroupCollectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGroupInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddGroupToRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateGroupInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveGroupFromRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRoleCollectionFromWebOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRoleCollectionFromGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRoleCollectionFromUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRoleCollectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRoleInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddRoleDefOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateRoleInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateRoleDefInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserLoginFromEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRolesAndPermissionsForCurrentUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRolesAndPermissionsForSiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.OnTracAdministration.MySettings.Default.OnTracAdministration_ontrac_UserGroup
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetUserCollectionFromSiteCompleted As GetUserCollectionFromSiteCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserCollectionFromWebCompleted As GetUserCollectionFromWebCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllUserCollectionFromWebCompleted As GetAllUserCollectionFromWebCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserCollectionFromGroupCompleted As GetUserCollectionFromGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserCollectionFromRoleCompleted As GetUserCollectionFromRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserCollectionCompleted As GetUserCollectionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserInfoCompleted As GetUserInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event AddUserToGroupCompleted As AddUserToGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event AddUserCollectionToGroupCompleted As AddUserCollectionToGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event AddUserToRoleCompleted As AddUserToRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event AddUserCollectionToRoleCompleted As AddUserCollectionToRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateUserInfoCompleted As UpdateUserInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveUserFromSiteCompleted As RemoveUserFromSiteCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveUserCollectionFromSiteCompleted As RemoveUserCollectionFromSiteCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveUserFromWebCompleted As RemoveUserFromWebCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveUserFromGroupCompleted As RemoveUserFromGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveUserCollectionFromGroupCompleted As RemoveUserCollectionFromGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveUserFromRoleCompleted As RemoveUserFromRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveUserCollectionFromRoleCompleted As RemoveUserCollectionFromRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGroupCollectionFromSiteCompleted As GetGroupCollectionFromSiteCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGroupCollectionFromWebCompleted As GetGroupCollectionFromWebCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGroupCollectionFromRoleCompleted As GetGroupCollectionFromRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGroupCollectionFromUserCompleted As GetGroupCollectionFromUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGroupCollectionCompleted As GetGroupCollectionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGroupInfoCompleted As GetGroupInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event AddGroupCompleted As AddGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event AddGroupToRoleCompleted As AddGroupToRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateGroupInfoCompleted As UpdateGroupInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveGroupCompleted As RemoveGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveGroupFromRoleCompleted As RemoveGroupFromRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRoleCollectionFromWebCompleted As GetRoleCollectionFromWebCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRoleCollectionFromGroupCompleted As GetRoleCollectionFromGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRoleCollectionFromUserCompleted As GetRoleCollectionFromUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRoleCollectionCompleted As GetRoleCollectionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRoleInfoCompleted As GetRoleInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event AddRoleCompleted As AddRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event AddRoleDefCompleted As AddRoleDefCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateRoleInfoCompleted As UpdateRoleInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateRoleDefInfoCompleted As UpdateRoleDefInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveRoleCompleted As RemoveRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserLoginFromEmailCompleted As GetUserLoginFromEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRolesAndPermissionsForCurrentUserCompleted As GetRolesAndPermissionsForCurrentUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRolesAndPermissionsForSiteCompleted As GetRolesAndPermissionsForSiteCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetUserCollectionFromSite", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserCollectionFromSite() As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetUserCollectionFromSite", New Object(-1) {})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserCollectionFromSiteAsync()
            Me.GetUserCollectionFromSiteAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserCollectionFromSiteAsync(ByVal userState As Object)
            If (Me.GetUserCollectionFromSiteOperationCompleted Is Nothing) Then
                Me.GetUserCollectionFromSiteOperationCompleted = AddressOf Me.OnGetUserCollectionFromSiteOperationCompleted
            End If
            Me.InvokeAsync("GetUserCollectionFromSite", New Object(-1) {}, Me.GetUserCollectionFromSiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserCollectionFromSiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserCollectionFromSiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserCollectionFromSiteCompleted(Me, New GetUserCollectionFromSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetUserCollectionFromWeb", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserCollectionFromWeb() As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetUserCollectionFromWeb", New Object(-1) {})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserCollectionFromWebAsync()
            Me.GetUserCollectionFromWebAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserCollectionFromWebAsync(ByVal userState As Object)
            If (Me.GetUserCollectionFromWebOperationCompleted Is Nothing) Then
                Me.GetUserCollectionFromWebOperationCompleted = AddressOf Me.OnGetUserCollectionFromWebOperationCompleted
            End If
            Me.InvokeAsync("GetUserCollectionFromWeb", New Object(-1) {}, Me.GetUserCollectionFromWebOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserCollectionFromWebOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserCollectionFromWebCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserCollectionFromWebCompleted(Me, New GetUserCollectionFromWebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetAllUserCollectionFromWe"& _ 
            "b", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllUserCollectionFromWeb() As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetAllUserCollectionFromWeb", New Object(-1) {})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllUserCollectionFromWebAsync()
            Me.GetAllUserCollectionFromWebAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllUserCollectionFromWebAsync(ByVal userState As Object)
            If (Me.GetAllUserCollectionFromWebOperationCompleted Is Nothing) Then
                Me.GetAllUserCollectionFromWebOperationCompleted = AddressOf Me.OnGetAllUserCollectionFromWebOperationCompleted
            End If
            Me.InvokeAsync("GetAllUserCollectionFromWeb", New Object(-1) {}, Me.GetAllUserCollectionFromWebOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllUserCollectionFromWebOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllUserCollectionFromWebCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllUserCollectionFromWebCompleted(Me, New GetAllUserCollectionFromWebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetUserCollectionFromGroup"& _ 
            "", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserCollectionFromGroup(ByVal groupName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetUserCollectionFromGroup", New Object() {groupName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserCollectionFromGroupAsync(ByVal groupName As String)
            Me.GetUserCollectionFromGroupAsync(groupName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserCollectionFromGroupAsync(ByVal groupName As String, ByVal userState As Object)
            If (Me.GetUserCollectionFromGroupOperationCompleted Is Nothing) Then
                Me.GetUserCollectionFromGroupOperationCompleted = AddressOf Me.OnGetUserCollectionFromGroupOperationCompleted
            End If
            Me.InvokeAsync("GetUserCollectionFromGroup", New Object() {groupName}, Me.GetUserCollectionFromGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserCollectionFromGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserCollectionFromGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserCollectionFromGroupCompleted(Me, New GetUserCollectionFromGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetUserCollectionFromRole", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserCollectionFromRole(ByVal roleName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetUserCollectionFromRole", New Object() {roleName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserCollectionFromRoleAsync(ByVal roleName As String)
            Me.GetUserCollectionFromRoleAsync(roleName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserCollectionFromRoleAsync(ByVal roleName As String, ByVal userState As Object)
            If (Me.GetUserCollectionFromRoleOperationCompleted Is Nothing) Then
                Me.GetUserCollectionFromRoleOperationCompleted = AddressOf Me.OnGetUserCollectionFromRoleOperationCompleted
            End If
            Me.InvokeAsync("GetUserCollectionFromRole", New Object() {roleName}, Me.GetUserCollectionFromRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserCollectionFromRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserCollectionFromRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserCollectionFromRoleCompleted(Me, New GetUserCollectionFromRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetUserCollection", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserCollection(ByVal userLoginNamesXml As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetUserCollection", New Object() {userLoginNamesXml})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserCollectionAsync(ByVal userLoginNamesXml As System.Xml.XmlNode)
            Me.GetUserCollectionAsync(userLoginNamesXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserCollectionAsync(ByVal userLoginNamesXml As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.GetUserCollectionOperationCompleted Is Nothing) Then
                Me.GetUserCollectionOperationCompleted = AddressOf Me.OnGetUserCollectionOperationCompleted
            End If
            Me.InvokeAsync("GetUserCollection", New Object() {userLoginNamesXml}, Me.GetUserCollectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserCollectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserCollectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserCollectionCompleted(Me, New GetUserCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetUserInfo", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserInfo(ByVal userLoginName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetUserInfo", New Object() {userLoginName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserInfoAsync(ByVal userLoginName As String)
            Me.GetUserInfoAsync(userLoginName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserInfoAsync(ByVal userLoginName As String, ByVal userState As Object)
            If (Me.GetUserInfoOperationCompleted Is Nothing) Then
                Me.GetUserInfoOperationCompleted = AddressOf Me.OnGetUserInfoOperationCompleted
            End If
            Me.InvokeAsync("GetUserInfo", New Object() {userLoginName}, Me.GetUserInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserInfoCompleted(Me, New GetUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddUserToGroup", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddUserToGroup(ByVal groupName As String, ByVal userName As String, ByVal userLoginName As String, ByVal userEmail As String, ByVal userNotes As String)
            Me.Invoke("AddUserToGroup", New Object() {groupName, userName, userLoginName, userEmail, userNotes})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddUserToGroupAsync(ByVal groupName As String, ByVal userName As String, ByVal userLoginName As String, ByVal userEmail As String, ByVal userNotes As String)
            Me.AddUserToGroupAsync(groupName, userName, userLoginName, userEmail, userNotes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddUserToGroupAsync(ByVal groupName As String, ByVal userName As String, ByVal userLoginName As String, ByVal userEmail As String, ByVal userNotes As String, ByVal userState As Object)
            If (Me.AddUserToGroupOperationCompleted Is Nothing) Then
                Me.AddUserToGroupOperationCompleted = AddressOf Me.OnAddUserToGroupOperationCompleted
            End If
            Me.InvokeAsync("AddUserToGroup", New Object() {groupName, userName, userLoginName, userEmail, userNotes}, Me.AddUserToGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddUserToGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddUserToGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddUserToGroupCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddUserCollectionToGroup", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddUserCollectionToGroup(ByVal groupName As String, ByVal usersInfoXml As System.Xml.XmlNode)
            Me.Invoke("AddUserCollectionToGroup", New Object() {groupName, usersInfoXml})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddUserCollectionToGroupAsync(ByVal groupName As String, ByVal usersInfoXml As System.Xml.XmlNode)
            Me.AddUserCollectionToGroupAsync(groupName, usersInfoXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddUserCollectionToGroupAsync(ByVal groupName As String, ByVal usersInfoXml As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.AddUserCollectionToGroupOperationCompleted Is Nothing) Then
                Me.AddUserCollectionToGroupOperationCompleted = AddressOf Me.OnAddUserCollectionToGroupOperationCompleted
            End If
            Me.InvokeAsync("AddUserCollectionToGroup", New Object() {groupName, usersInfoXml}, Me.AddUserCollectionToGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddUserCollectionToGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddUserCollectionToGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddUserCollectionToGroupCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddUserToRole", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddUserToRole(ByVal roleName As String, ByVal userName As String, ByVal userLoginName As String, ByVal userEmail As String, ByVal userNotes As String)
            Me.Invoke("AddUserToRole", New Object() {roleName, userName, userLoginName, userEmail, userNotes})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddUserToRoleAsync(ByVal roleName As String, ByVal userName As String, ByVal userLoginName As String, ByVal userEmail As String, ByVal userNotes As String)
            Me.AddUserToRoleAsync(roleName, userName, userLoginName, userEmail, userNotes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddUserToRoleAsync(ByVal roleName As String, ByVal userName As String, ByVal userLoginName As String, ByVal userEmail As String, ByVal userNotes As String, ByVal userState As Object)
            If (Me.AddUserToRoleOperationCompleted Is Nothing) Then
                Me.AddUserToRoleOperationCompleted = AddressOf Me.OnAddUserToRoleOperationCompleted
            End If
            Me.InvokeAsync("AddUserToRole", New Object() {roleName, userName, userLoginName, userEmail, userNotes}, Me.AddUserToRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddUserToRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddUserToRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddUserToRoleCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddUserCollectionToRole", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddUserCollectionToRole(ByVal roleName As String, ByVal usersInfoXml As System.Xml.XmlNode)
            Me.Invoke("AddUserCollectionToRole", New Object() {roleName, usersInfoXml})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddUserCollectionToRoleAsync(ByVal roleName As String, ByVal usersInfoXml As System.Xml.XmlNode)
            Me.AddUserCollectionToRoleAsync(roleName, usersInfoXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddUserCollectionToRoleAsync(ByVal roleName As String, ByVal usersInfoXml As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.AddUserCollectionToRoleOperationCompleted Is Nothing) Then
                Me.AddUserCollectionToRoleOperationCompleted = AddressOf Me.OnAddUserCollectionToRoleOperationCompleted
            End If
            Me.InvokeAsync("AddUserCollectionToRole", New Object() {roleName, usersInfoXml}, Me.AddUserCollectionToRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddUserCollectionToRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddUserCollectionToRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddUserCollectionToRoleCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/UpdateUserInfo", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateUserInfo(ByVal userLoginName As String, ByVal userName As String, ByVal userEmail As String, ByVal userNotes As String)
            Me.Invoke("UpdateUserInfo", New Object() {userLoginName, userName, userEmail, userNotes})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserInfoAsync(ByVal userLoginName As String, ByVal userName As String, ByVal userEmail As String, ByVal userNotes As String)
            Me.UpdateUserInfoAsync(userLoginName, userName, userEmail, userNotes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserInfoAsync(ByVal userLoginName As String, ByVal userName As String, ByVal userEmail As String, ByVal userNotes As String, ByVal userState As Object)
            If (Me.UpdateUserInfoOperationCompleted Is Nothing) Then
                Me.UpdateUserInfoOperationCompleted = AddressOf Me.OnUpdateUserInfoOperationCompleted
            End If
            Me.InvokeAsync("UpdateUserInfo", New Object() {userLoginName, userName, userEmail, userNotes}, Me.UpdateUserInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateUserInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateUserInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateUserInfoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserFromSite", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub RemoveUserFromSite(ByVal userLoginName As String)
            Me.Invoke("RemoveUserFromSite", New Object() {userLoginName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveUserFromSiteAsync(ByVal userLoginName As String)
            Me.RemoveUserFromSiteAsync(userLoginName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveUserFromSiteAsync(ByVal userLoginName As String, ByVal userState As Object)
            If (Me.RemoveUserFromSiteOperationCompleted Is Nothing) Then
                Me.RemoveUserFromSiteOperationCompleted = AddressOf Me.OnRemoveUserFromSiteOperationCompleted
            End If
            Me.InvokeAsync("RemoveUserFromSite", New Object() {userLoginName}, Me.RemoveUserFromSiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveUserFromSiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveUserFromSiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveUserFromSiteCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserCollectionFromSi"& _ 
            "te", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub RemoveUserCollectionFromSite(ByVal userLoginNamesXml As System.Xml.XmlNode)
            Me.Invoke("RemoveUserCollectionFromSite", New Object() {userLoginNamesXml})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveUserCollectionFromSiteAsync(ByVal userLoginNamesXml As System.Xml.XmlNode)
            Me.RemoveUserCollectionFromSiteAsync(userLoginNamesXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveUserCollectionFromSiteAsync(ByVal userLoginNamesXml As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.RemoveUserCollectionFromSiteOperationCompleted Is Nothing) Then
                Me.RemoveUserCollectionFromSiteOperationCompleted = AddressOf Me.OnRemoveUserCollectionFromSiteOperationCompleted
            End If
            Me.InvokeAsync("RemoveUserCollectionFromSite", New Object() {userLoginNamesXml}, Me.RemoveUserCollectionFromSiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveUserCollectionFromSiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveUserCollectionFromSiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveUserCollectionFromSiteCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserFromWeb", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub RemoveUserFromWeb(ByVal userLoginName As String)
            Me.Invoke("RemoveUserFromWeb", New Object() {userLoginName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveUserFromWebAsync(ByVal userLoginName As String)
            Me.RemoveUserFromWebAsync(userLoginName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveUserFromWebAsync(ByVal userLoginName As String, ByVal userState As Object)
            If (Me.RemoveUserFromWebOperationCompleted Is Nothing) Then
                Me.RemoveUserFromWebOperationCompleted = AddressOf Me.OnRemoveUserFromWebOperationCompleted
            End If
            Me.InvokeAsync("RemoveUserFromWeb", New Object() {userLoginName}, Me.RemoveUserFromWebOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveUserFromWebOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveUserFromWebCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveUserFromWebCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserFromGroup", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub RemoveUserFromGroup(ByVal groupName As String, ByVal userLoginName As String)
            Me.Invoke("RemoveUserFromGroup", New Object() {groupName, userLoginName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveUserFromGroupAsync(ByVal groupName As String, ByVal userLoginName As String)
            Me.RemoveUserFromGroupAsync(groupName, userLoginName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveUserFromGroupAsync(ByVal groupName As String, ByVal userLoginName As String, ByVal userState As Object)
            If (Me.RemoveUserFromGroupOperationCompleted Is Nothing) Then
                Me.RemoveUserFromGroupOperationCompleted = AddressOf Me.OnRemoveUserFromGroupOperationCompleted
            End If
            Me.InvokeAsync("RemoveUserFromGroup", New Object() {groupName, userLoginName}, Me.RemoveUserFromGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveUserFromGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveUserFromGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveUserFromGroupCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserCollectionFromGr"& _ 
            "oup", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub RemoveUserCollectionFromGroup(ByVal groupName As String, ByVal userLoginNamesXml As System.Xml.XmlNode)
            Me.Invoke("RemoveUserCollectionFromGroup", New Object() {groupName, userLoginNamesXml})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveUserCollectionFromGroupAsync(ByVal groupName As String, ByVal userLoginNamesXml As System.Xml.XmlNode)
            Me.RemoveUserCollectionFromGroupAsync(groupName, userLoginNamesXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveUserCollectionFromGroupAsync(ByVal groupName As String, ByVal userLoginNamesXml As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.RemoveUserCollectionFromGroupOperationCompleted Is Nothing) Then
                Me.RemoveUserCollectionFromGroupOperationCompleted = AddressOf Me.OnRemoveUserCollectionFromGroupOperationCompleted
            End If
            Me.InvokeAsync("RemoveUserCollectionFromGroup", New Object() {groupName, userLoginNamesXml}, Me.RemoveUserCollectionFromGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveUserCollectionFromGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveUserCollectionFromGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveUserCollectionFromGroupCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserFromRole", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub RemoveUserFromRole(ByVal roleName As String, ByVal userLoginName As String)
            Me.Invoke("RemoveUserFromRole", New Object() {roleName, userLoginName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveUserFromRoleAsync(ByVal roleName As String, ByVal userLoginName As String)
            Me.RemoveUserFromRoleAsync(roleName, userLoginName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveUserFromRoleAsync(ByVal roleName As String, ByVal userLoginName As String, ByVal userState As Object)
            If (Me.RemoveUserFromRoleOperationCompleted Is Nothing) Then
                Me.RemoveUserFromRoleOperationCompleted = AddressOf Me.OnRemoveUserFromRoleOperationCompleted
            End If
            Me.InvokeAsync("RemoveUserFromRole", New Object() {roleName, userLoginName}, Me.RemoveUserFromRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveUserFromRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveUserFromRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveUserFromRoleCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveUserCollectionFromRo"& _ 
            "le", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub RemoveUserCollectionFromRole(ByVal roleName As String, ByVal userLoginNamesXml As System.Xml.XmlNode)
            Me.Invoke("RemoveUserCollectionFromRole", New Object() {roleName, userLoginNamesXml})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveUserCollectionFromRoleAsync(ByVal roleName As String, ByVal userLoginNamesXml As System.Xml.XmlNode)
            Me.RemoveUserCollectionFromRoleAsync(roleName, userLoginNamesXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveUserCollectionFromRoleAsync(ByVal roleName As String, ByVal userLoginNamesXml As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.RemoveUserCollectionFromRoleOperationCompleted Is Nothing) Then
                Me.RemoveUserCollectionFromRoleOperationCompleted = AddressOf Me.OnRemoveUserCollectionFromRoleOperationCompleted
            End If
            Me.InvokeAsync("RemoveUserCollectionFromRole", New Object() {roleName, userLoginNamesXml}, Me.RemoveUserCollectionFromRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveUserCollectionFromRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveUserCollectionFromRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveUserCollectionFromRoleCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupCollectionFromSite"& _ 
            "", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGroupCollectionFromSite() As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetGroupCollectionFromSite", New Object(-1) {})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGroupCollectionFromSiteAsync()
            Me.GetGroupCollectionFromSiteAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGroupCollectionFromSiteAsync(ByVal userState As Object)
            If (Me.GetGroupCollectionFromSiteOperationCompleted Is Nothing) Then
                Me.GetGroupCollectionFromSiteOperationCompleted = AddressOf Me.OnGetGroupCollectionFromSiteOperationCompleted
            End If
            Me.InvokeAsync("GetGroupCollectionFromSite", New Object(-1) {}, Me.GetGroupCollectionFromSiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGroupCollectionFromSiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGroupCollectionFromSiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGroupCollectionFromSiteCompleted(Me, New GetGroupCollectionFromSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupCollectionFromWeb", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGroupCollectionFromWeb() As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetGroupCollectionFromWeb", New Object(-1) {})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGroupCollectionFromWebAsync()
            Me.GetGroupCollectionFromWebAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGroupCollectionFromWebAsync(ByVal userState As Object)
            If (Me.GetGroupCollectionFromWebOperationCompleted Is Nothing) Then
                Me.GetGroupCollectionFromWebOperationCompleted = AddressOf Me.OnGetGroupCollectionFromWebOperationCompleted
            End If
            Me.InvokeAsync("GetGroupCollectionFromWeb", New Object(-1) {}, Me.GetGroupCollectionFromWebOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGroupCollectionFromWebOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGroupCollectionFromWebCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGroupCollectionFromWebCompleted(Me, New GetGroupCollectionFromWebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupCollectionFromRole"& _ 
            "", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGroupCollectionFromRole(ByVal roleName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetGroupCollectionFromRole", New Object() {roleName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGroupCollectionFromRoleAsync(ByVal roleName As String)
            Me.GetGroupCollectionFromRoleAsync(roleName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGroupCollectionFromRoleAsync(ByVal roleName As String, ByVal userState As Object)
            If (Me.GetGroupCollectionFromRoleOperationCompleted Is Nothing) Then
                Me.GetGroupCollectionFromRoleOperationCompleted = AddressOf Me.OnGetGroupCollectionFromRoleOperationCompleted
            End If
            Me.InvokeAsync("GetGroupCollectionFromRole", New Object() {roleName}, Me.GetGroupCollectionFromRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGroupCollectionFromRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGroupCollectionFromRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGroupCollectionFromRoleCompleted(Me, New GetGroupCollectionFromRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupCollectionFromUser"& _ 
            "", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGroupCollectionFromUser(ByVal userLoginName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetGroupCollectionFromUser", New Object() {userLoginName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGroupCollectionFromUserAsync(ByVal userLoginName As String)
            Me.GetGroupCollectionFromUserAsync(userLoginName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGroupCollectionFromUserAsync(ByVal userLoginName As String, ByVal userState As Object)
            If (Me.GetGroupCollectionFromUserOperationCompleted Is Nothing) Then
                Me.GetGroupCollectionFromUserOperationCompleted = AddressOf Me.OnGetGroupCollectionFromUserOperationCompleted
            End If
            Me.InvokeAsync("GetGroupCollectionFromUser", New Object() {userLoginName}, Me.GetGroupCollectionFromUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGroupCollectionFromUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGroupCollectionFromUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGroupCollectionFromUserCompleted(Me, New GetGroupCollectionFromUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupCollection", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGroupCollection(ByVal groupNamesXml As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetGroupCollection", New Object() {groupNamesXml})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGroupCollectionAsync(ByVal groupNamesXml As System.Xml.XmlNode)
            Me.GetGroupCollectionAsync(groupNamesXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGroupCollectionAsync(ByVal groupNamesXml As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.GetGroupCollectionOperationCompleted Is Nothing) Then
                Me.GetGroupCollectionOperationCompleted = AddressOf Me.OnGetGroupCollectionOperationCompleted
            End If
            Me.InvokeAsync("GetGroupCollection", New Object() {groupNamesXml}, Me.GetGroupCollectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGroupCollectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGroupCollectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGroupCollectionCompleted(Me, New GetGroupCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetGroupInfo", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGroupInfo(ByVal groupName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetGroupInfo", New Object() {groupName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGroupInfoAsync(ByVal groupName As String)
            Me.GetGroupInfoAsync(groupName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGroupInfoAsync(ByVal groupName As String, ByVal userState As Object)
            If (Me.GetGroupInfoOperationCompleted Is Nothing) Then
                Me.GetGroupInfoOperationCompleted = AddressOf Me.OnGetGroupInfoOperationCompleted
            End If
            Me.InvokeAsync("GetGroupInfo", New Object() {groupName}, Me.GetGroupInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGroupInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGroupInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGroupInfoCompleted(Me, New GetGroupInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddGroup", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddGroup(ByVal groupName As String, ByVal ownerIdentifier As String, ByVal ownerType As String, ByVal defaultUserLoginName As String, ByVal description As String)
            Me.Invoke("AddGroup", New Object() {groupName, ownerIdentifier, ownerType, defaultUserLoginName, description})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddGroupAsync(ByVal groupName As String, ByVal ownerIdentifier As String, ByVal ownerType As String, ByVal defaultUserLoginName As String, ByVal description As String)
            Me.AddGroupAsync(groupName, ownerIdentifier, ownerType, defaultUserLoginName, description, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddGroupAsync(ByVal groupName As String, ByVal ownerIdentifier As String, ByVal ownerType As String, ByVal defaultUserLoginName As String, ByVal description As String, ByVal userState As Object)
            If (Me.AddGroupOperationCompleted Is Nothing) Then
                Me.AddGroupOperationCompleted = AddressOf Me.OnAddGroupOperationCompleted
            End If
            Me.InvokeAsync("AddGroup", New Object() {groupName, ownerIdentifier, ownerType, defaultUserLoginName, description}, Me.AddGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddGroupCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddGroupToRole", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddGroupToRole(ByVal roleName As String, ByVal groupName As String)
            Me.Invoke("AddGroupToRole", New Object() {roleName, groupName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddGroupToRoleAsync(ByVal roleName As String, ByVal groupName As String)
            Me.AddGroupToRoleAsync(roleName, groupName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddGroupToRoleAsync(ByVal roleName As String, ByVal groupName As String, ByVal userState As Object)
            If (Me.AddGroupToRoleOperationCompleted Is Nothing) Then
                Me.AddGroupToRoleOperationCompleted = AddressOf Me.OnAddGroupToRoleOperationCompleted
            End If
            Me.InvokeAsync("AddGroupToRole", New Object() {roleName, groupName}, Me.AddGroupToRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddGroupToRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddGroupToRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddGroupToRoleCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/UpdateGroupInfo", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateGroupInfo(ByVal oldGroupName As String, ByVal groupName As String, ByVal ownerIdentifier As String, ByVal ownerType As String, ByVal description As String)
            Me.Invoke("UpdateGroupInfo", New Object() {oldGroupName, groupName, ownerIdentifier, ownerType, description})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateGroupInfoAsync(ByVal oldGroupName As String, ByVal groupName As String, ByVal ownerIdentifier As String, ByVal ownerType As String, ByVal description As String)
            Me.UpdateGroupInfoAsync(oldGroupName, groupName, ownerIdentifier, ownerType, description, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateGroupInfoAsync(ByVal oldGroupName As String, ByVal groupName As String, ByVal ownerIdentifier As String, ByVal ownerType As String, ByVal description As String, ByVal userState As Object)
            If (Me.UpdateGroupInfoOperationCompleted Is Nothing) Then
                Me.UpdateGroupInfoOperationCompleted = AddressOf Me.OnUpdateGroupInfoOperationCompleted
            End If
            Me.InvokeAsync("UpdateGroupInfo", New Object() {oldGroupName, groupName, ownerIdentifier, ownerType, description}, Me.UpdateGroupInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateGroupInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateGroupInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateGroupInfoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveGroup", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub RemoveGroup(ByVal groupName As String)
            Me.Invoke("RemoveGroup", New Object() {groupName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveGroupAsync(ByVal groupName As String)
            Me.RemoveGroupAsync(groupName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveGroupAsync(ByVal groupName As String, ByVal userState As Object)
            If (Me.RemoveGroupOperationCompleted Is Nothing) Then
                Me.RemoveGroupOperationCompleted = AddressOf Me.OnRemoveGroupOperationCompleted
            End If
            Me.InvokeAsync("RemoveGroup", New Object() {groupName}, Me.RemoveGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveGroupCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveGroupFromRole", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub RemoveGroupFromRole(ByVal roleName As String, ByVal groupName As String)
            Me.Invoke("RemoveGroupFromRole", New Object() {roleName, groupName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveGroupFromRoleAsync(ByVal roleName As String, ByVal groupName As String)
            Me.RemoveGroupFromRoleAsync(roleName, groupName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveGroupFromRoleAsync(ByVal roleName As String, ByVal groupName As String, ByVal userState As Object)
            If (Me.RemoveGroupFromRoleOperationCompleted Is Nothing) Then
                Me.RemoveGroupFromRoleOperationCompleted = AddressOf Me.OnRemoveGroupFromRoleOperationCompleted
            End If
            Me.InvokeAsync("RemoveGroupFromRole", New Object() {roleName, groupName}, Me.RemoveGroupFromRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveGroupFromRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveGroupFromRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveGroupFromRoleCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetRoleCollectionFromWeb", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRoleCollectionFromWeb() As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetRoleCollectionFromWeb", New Object(-1) {})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRoleCollectionFromWebAsync()
            Me.GetRoleCollectionFromWebAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRoleCollectionFromWebAsync(ByVal userState As Object)
            If (Me.GetRoleCollectionFromWebOperationCompleted Is Nothing) Then
                Me.GetRoleCollectionFromWebOperationCompleted = AddressOf Me.OnGetRoleCollectionFromWebOperationCompleted
            End If
            Me.InvokeAsync("GetRoleCollectionFromWeb", New Object(-1) {}, Me.GetRoleCollectionFromWebOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRoleCollectionFromWebOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRoleCollectionFromWebCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRoleCollectionFromWebCompleted(Me, New GetRoleCollectionFromWebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetRoleCollectionFromGroup"& _ 
            "", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRoleCollectionFromGroup(ByVal groupName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetRoleCollectionFromGroup", New Object() {groupName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRoleCollectionFromGroupAsync(ByVal groupName As String)
            Me.GetRoleCollectionFromGroupAsync(groupName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRoleCollectionFromGroupAsync(ByVal groupName As String, ByVal userState As Object)
            If (Me.GetRoleCollectionFromGroupOperationCompleted Is Nothing) Then
                Me.GetRoleCollectionFromGroupOperationCompleted = AddressOf Me.OnGetRoleCollectionFromGroupOperationCompleted
            End If
            Me.InvokeAsync("GetRoleCollectionFromGroup", New Object() {groupName}, Me.GetRoleCollectionFromGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRoleCollectionFromGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRoleCollectionFromGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRoleCollectionFromGroupCompleted(Me, New GetRoleCollectionFromGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetRoleCollectionFromUser", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRoleCollectionFromUser(ByVal userLoginName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetRoleCollectionFromUser", New Object() {userLoginName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRoleCollectionFromUserAsync(ByVal userLoginName As String)
            Me.GetRoleCollectionFromUserAsync(userLoginName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRoleCollectionFromUserAsync(ByVal userLoginName As String, ByVal userState As Object)
            If (Me.GetRoleCollectionFromUserOperationCompleted Is Nothing) Then
                Me.GetRoleCollectionFromUserOperationCompleted = AddressOf Me.OnGetRoleCollectionFromUserOperationCompleted
            End If
            Me.InvokeAsync("GetRoleCollectionFromUser", New Object() {userLoginName}, Me.GetRoleCollectionFromUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRoleCollectionFromUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRoleCollectionFromUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRoleCollectionFromUserCompleted(Me, New GetRoleCollectionFromUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetRoleCollection", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRoleCollection(ByVal roleNamesXml As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetRoleCollection", New Object() {roleNamesXml})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRoleCollectionAsync(ByVal roleNamesXml As System.Xml.XmlNode)
            Me.GetRoleCollectionAsync(roleNamesXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRoleCollectionAsync(ByVal roleNamesXml As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.GetRoleCollectionOperationCompleted Is Nothing) Then
                Me.GetRoleCollectionOperationCompleted = AddressOf Me.OnGetRoleCollectionOperationCompleted
            End If
            Me.InvokeAsync("GetRoleCollection", New Object() {roleNamesXml}, Me.GetRoleCollectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRoleCollectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRoleCollectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRoleCollectionCompleted(Me, New GetRoleCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetRoleInfo", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRoleInfo(ByVal roleName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetRoleInfo", New Object() {roleName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRoleInfoAsync(ByVal roleName As String)
            Me.GetRoleInfoAsync(roleName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRoleInfoAsync(ByVal roleName As String, ByVal userState As Object)
            If (Me.GetRoleInfoOperationCompleted Is Nothing) Then
                Me.GetRoleInfoOperationCompleted = AddressOf Me.OnGetRoleInfoOperationCompleted
            End If
            Me.InvokeAsync("GetRoleInfo", New Object() {roleName}, Me.GetRoleInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRoleInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRoleInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRoleInfoCompleted(Me, New GetRoleInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddRole", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddRole(ByVal roleName As String, ByVal description As String, ByVal permissionMask As Integer)
            Me.Invoke("AddRole", New Object() {roleName, description, permissionMask})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddRoleAsync(ByVal roleName As String, ByVal description As String, ByVal permissionMask As Integer)
            Me.AddRoleAsync(roleName, description, permissionMask, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddRoleAsync(ByVal roleName As String, ByVal description As String, ByVal permissionMask As Integer, ByVal userState As Object)
            If (Me.AddRoleOperationCompleted Is Nothing) Then
                Me.AddRoleOperationCompleted = AddressOf Me.OnAddRoleOperationCompleted
            End If
            Me.InvokeAsync("AddRole", New Object() {roleName, description, permissionMask}, Me.AddRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddRoleCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/AddRoleDef", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddRoleDef(ByVal roleName As String, ByVal description As String, ByVal permissionMask As ULong)
            Me.Invoke("AddRoleDef", New Object() {roleName, description, permissionMask})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddRoleDefAsync(ByVal roleName As String, ByVal description As String, ByVal permissionMask As ULong)
            Me.AddRoleDefAsync(roleName, description, permissionMask, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddRoleDefAsync(ByVal roleName As String, ByVal description As String, ByVal permissionMask As ULong, ByVal userState As Object)
            If (Me.AddRoleDefOperationCompleted Is Nothing) Then
                Me.AddRoleDefOperationCompleted = AddressOf Me.OnAddRoleDefOperationCompleted
            End If
            Me.InvokeAsync("AddRoleDef", New Object() {roleName, description, permissionMask}, Me.AddRoleDefOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddRoleDefOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddRoleDefCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddRoleDefCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/UpdateRoleInfo", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateRoleInfo(ByVal oldRoleName As String, ByVal roleName As String, ByVal description As String, ByVal permissionMask As Integer)
            Me.Invoke("UpdateRoleInfo", New Object() {oldRoleName, roleName, description, permissionMask})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRoleInfoAsync(ByVal oldRoleName As String, ByVal roleName As String, ByVal description As String, ByVal permissionMask As Integer)
            Me.UpdateRoleInfoAsync(oldRoleName, roleName, description, permissionMask, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRoleInfoAsync(ByVal oldRoleName As String, ByVal roleName As String, ByVal description As String, ByVal permissionMask As Integer, ByVal userState As Object)
            If (Me.UpdateRoleInfoOperationCompleted Is Nothing) Then
                Me.UpdateRoleInfoOperationCompleted = AddressOf Me.OnUpdateRoleInfoOperationCompleted
            End If
            Me.InvokeAsync("UpdateRoleInfo", New Object() {oldRoleName, roleName, description, permissionMask}, Me.UpdateRoleInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateRoleInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateRoleInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateRoleInfoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/UpdateRoleDefInfo", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateRoleDefInfo(ByVal oldRoleName As String, ByVal roleName As String, ByVal description As String, ByVal permissionMask As ULong)
            Me.Invoke("UpdateRoleDefInfo", New Object() {oldRoleName, roleName, description, permissionMask})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRoleDefInfoAsync(ByVal oldRoleName As String, ByVal roleName As String, ByVal description As String, ByVal permissionMask As ULong)
            Me.UpdateRoleDefInfoAsync(oldRoleName, roleName, description, permissionMask, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRoleDefInfoAsync(ByVal oldRoleName As String, ByVal roleName As String, ByVal description As String, ByVal permissionMask As ULong, ByVal userState As Object)
            If (Me.UpdateRoleDefInfoOperationCompleted Is Nothing) Then
                Me.UpdateRoleDefInfoOperationCompleted = AddressOf Me.OnUpdateRoleDefInfoOperationCompleted
            End If
            Me.InvokeAsync("UpdateRoleDefInfo", New Object() {oldRoleName, roleName, description, permissionMask}, Me.UpdateRoleDefInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateRoleDefInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateRoleDefInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateRoleDefInfoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/RemoveRole", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub RemoveRole(ByVal roleName As String)
            Me.Invoke("RemoveRole", New Object() {roleName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveRoleAsync(ByVal roleName As String)
            Me.RemoveRoleAsync(roleName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveRoleAsync(ByVal roleName As String, ByVal userState As Object)
            If (Me.RemoveRoleOperationCompleted Is Nothing) Then
                Me.RemoveRoleOperationCompleted = AddressOf Me.OnRemoveRoleOperationCompleted
            End If
            Me.InvokeAsync("RemoveRole", New Object() {roleName}, Me.RemoveRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveRoleCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetUserLoginFromEmail", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserLoginFromEmail(ByVal emailXml As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetUserLoginFromEmail", New Object() {emailXml})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserLoginFromEmailAsync(ByVal emailXml As System.Xml.XmlNode)
            Me.GetUserLoginFromEmailAsync(emailXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserLoginFromEmailAsync(ByVal emailXml As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.GetUserLoginFromEmailOperationCompleted Is Nothing) Then
                Me.GetUserLoginFromEmailOperationCompleted = AddressOf Me.OnGetUserLoginFromEmailOperationCompleted
            End If
            Me.InvokeAsync("GetUserLoginFromEmail", New Object() {emailXml}, Me.GetUserLoginFromEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserLoginFromEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserLoginFromEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserLoginFromEmailCompleted(Me, New GetUserLoginFromEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetRolesAndPermissionsForC"& _ 
            "urrentUser", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRolesAndPermissionsForCurrentUser() As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetRolesAndPermissionsForCurrentUser", New Object(-1) {})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRolesAndPermissionsForCurrentUserAsync()
            Me.GetRolesAndPermissionsForCurrentUserAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRolesAndPermissionsForCurrentUserAsync(ByVal userState As Object)
            If (Me.GetRolesAndPermissionsForCurrentUserOperationCompleted Is Nothing) Then
                Me.GetRolesAndPermissionsForCurrentUserOperationCompleted = AddressOf Me.OnGetRolesAndPermissionsForCurrentUserOperationCompleted
            End If
            Me.InvokeAsync("GetRolesAndPermissionsForCurrentUser", New Object(-1) {}, Me.GetRolesAndPermissionsForCurrentUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRolesAndPermissionsForCurrentUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRolesAndPermissionsForCurrentUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRolesAndPermissionsForCurrentUserCompleted(Me, New GetRolesAndPermissionsForCurrentUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/directory/GetRolesAndPermissionsForS"& _ 
            "ite", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/directory/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRolesAndPermissionsForSite() As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetRolesAndPermissionsForSite", New Object(-1) {})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRolesAndPermissionsForSiteAsync()
            Me.GetRolesAndPermissionsForSiteAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRolesAndPermissionsForSiteAsync(ByVal userState As Object)
            If (Me.GetRolesAndPermissionsForSiteOperationCompleted Is Nothing) Then
                Me.GetRolesAndPermissionsForSiteOperationCompleted = AddressOf Me.OnGetRolesAndPermissionsForSiteOperationCompleted
            End If
            Me.InvokeAsync("GetRolesAndPermissionsForSite", New Object(-1) {}, Me.GetRolesAndPermissionsForSiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRolesAndPermissionsForSiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRolesAndPermissionsForSiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRolesAndPermissionsForSiteCompleted(Me, New GetRolesAndPermissionsForSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetUserCollectionFromSiteCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserCollectionFromSiteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserCollectionFromSiteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetUserCollectionFromWebCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserCollectionFromWebCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserCollectionFromWebCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetAllUserCollectionFromWebCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllUserCollectionFromWebCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllUserCollectionFromWebCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetUserCollectionFromGroupCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserCollectionFromGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserCollectionFromGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetUserCollectionFromRoleCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserCollectionFromRoleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserCollectionFromRoleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetUserCollectionCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserCollectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserCollectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetUserInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AddUserToGroupCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AddUserCollectionToGroupCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AddUserToRoleCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AddUserCollectionToRoleCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub UpdateUserInfoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub RemoveUserFromSiteCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub RemoveUserCollectionFromSiteCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub RemoveUserFromWebCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub RemoveUserFromGroupCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub RemoveUserCollectionFromGroupCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub RemoveUserFromRoleCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub RemoveUserCollectionFromRoleCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetGroupCollectionFromSiteCompletedEventHandler(ByVal sender As Object, ByVal e As GetGroupCollectionFromSiteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGroupCollectionFromSiteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetGroupCollectionFromWebCompletedEventHandler(ByVal sender As Object, ByVal e As GetGroupCollectionFromWebCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGroupCollectionFromWebCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetGroupCollectionFromRoleCompletedEventHandler(ByVal sender As Object, ByVal e As GetGroupCollectionFromRoleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGroupCollectionFromRoleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetGroupCollectionFromUserCompletedEventHandler(ByVal sender As Object, ByVal e As GetGroupCollectionFromUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGroupCollectionFromUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetGroupCollectionCompletedEventHandler(ByVal sender As Object, ByVal e As GetGroupCollectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGroupCollectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetGroupInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetGroupInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGroupInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AddGroupCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AddGroupToRoleCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub UpdateGroupInfoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub RemoveGroupCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub RemoveGroupFromRoleCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetRoleCollectionFromWebCompletedEventHandler(ByVal sender As Object, ByVal e As GetRoleCollectionFromWebCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRoleCollectionFromWebCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetRoleCollectionFromGroupCompletedEventHandler(ByVal sender As Object, ByVal e As GetRoleCollectionFromGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRoleCollectionFromGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetRoleCollectionFromUserCompletedEventHandler(ByVal sender As Object, ByVal e As GetRoleCollectionFromUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRoleCollectionFromUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetRoleCollectionCompletedEventHandler(ByVal sender As Object, ByVal e As GetRoleCollectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRoleCollectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetRoleInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetRoleInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRoleInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AddRoleCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AddRoleDefCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub UpdateRoleInfoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub UpdateRoleDefInfoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub RemoveRoleCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetUserLoginFromEmailCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserLoginFromEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserLoginFromEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetRolesAndPermissionsForCurrentUserCompletedEventHandler(ByVal sender As Object, ByVal e As GetRolesAndPermissionsForCurrentUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRolesAndPermissionsForCurrentUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetRolesAndPermissionsForSiteCompletedEventHandler(ByVal sender As Object, ByVal e As GetRolesAndPermissionsForSiteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRolesAndPermissionsForSiteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
End Namespace
