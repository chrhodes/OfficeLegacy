'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3053.
'
Namespace lpsps01v
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="AdminSoap", [Namespace]:="http://schemas.microsoft.com/sharepoint/soap/")>  _
    Partial Public Class Admin
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private CreateSiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteSiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLanguagesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RefreshConfigCacheOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.ExcelSharePointExplorer.MySettings.Default.ExcelSharePointExplorer_lpsps01v_Admin
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event CreateSiteCompleted As CreateSiteCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteSiteCompleted As DeleteSiteCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLanguagesCompleted As GetLanguagesCompletedEventHandler
        
        '''<remarks/>
        Public Event RefreshConfigCacheCompleted As RefreshConfigCacheCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/CreateSite", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateSite(ByVal Url As String, ByVal Title As String, ByVal Description As String, ByVal Lcid As Integer, ByVal WebTemplate As String, ByVal OwnerLogin As String, ByVal OwnerName As String, ByVal OwnerEmail As String, ByVal PortalUrl As String, ByVal PortalName As String) As String
            Dim results() As Object = Me.Invoke("CreateSite", New Object() {Url, Title, Description, Lcid, WebTemplate, OwnerLogin, OwnerName, OwnerEmail, PortalUrl, PortalName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateSiteAsync(ByVal Url As String, ByVal Title As String, ByVal Description As String, ByVal Lcid As Integer, ByVal WebTemplate As String, ByVal OwnerLogin As String, ByVal OwnerName As String, ByVal OwnerEmail As String, ByVal PortalUrl As String, ByVal PortalName As String)
            Me.CreateSiteAsync(Url, Title, Description, Lcid, WebTemplate, OwnerLogin, OwnerName, OwnerEmail, PortalUrl, PortalName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateSiteAsync(ByVal Url As String, ByVal Title As String, ByVal Description As String, ByVal Lcid As Integer, ByVal WebTemplate As String, ByVal OwnerLogin As String, ByVal OwnerName As String, ByVal OwnerEmail As String, ByVal PortalUrl As String, ByVal PortalName As String, ByVal userState As Object)
            If (Me.CreateSiteOperationCompleted Is Nothing) Then
                Me.CreateSiteOperationCompleted = AddressOf Me.OnCreateSiteOperationCompleted
            End If
            Me.InvokeAsync("CreateSite", New Object() {Url, Title, Description, Lcid, WebTemplate, OwnerLogin, OwnerName, OwnerEmail, PortalUrl, PortalName}, Me.CreateSiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateSiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateSiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateSiteCompleted(Me, New CreateSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/DeleteSite", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteSite(ByVal Url As String)
            Me.Invoke("DeleteSite", New Object() {Url})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSiteAsync(ByVal Url As String)
            Me.DeleteSiteAsync(Url, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSiteAsync(ByVal Url As String, ByVal userState As Object)
            If (Me.DeleteSiteOperationCompleted Is Nothing) Then
                Me.DeleteSiteOperationCompleted = AddressOf Me.OnDeleteSiteOperationCompleted
            End If
            Me.InvokeAsync("DeleteSite", New Object() {Url}, Me.DeleteSiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteSiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteSiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteSiteCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetLanguages", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLanguages() As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetLanguages", New Object(-1) {})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLanguagesAsync()
            Me.GetLanguagesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLanguagesAsync(ByVal userState As Object)
            If (Me.GetLanguagesOperationCompleted Is Nothing) Then
                Me.GetLanguagesOperationCompleted = AddressOf Me.OnGetLanguagesOperationCompleted
            End If
            Me.InvokeAsync("GetLanguages", New Object(-1) {}, Me.GetLanguagesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLanguagesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLanguagesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLanguagesCompleted(Me, New GetLanguagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/RefreshConfigCache", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub RefreshConfigCache(ByVal VirtualServerId As System.Guid, ByVal AdminGroupChanged As Boolean)
            Me.Invoke("RefreshConfigCache", New Object() {VirtualServerId, AdminGroupChanged})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RefreshConfigCacheAsync(ByVal VirtualServerId As System.Guid, ByVal AdminGroupChanged As Boolean)
            Me.RefreshConfigCacheAsync(VirtualServerId, AdminGroupChanged, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RefreshConfigCacheAsync(ByVal VirtualServerId As System.Guid, ByVal AdminGroupChanged As Boolean, ByVal userState As Object)
            If (Me.RefreshConfigCacheOperationCompleted Is Nothing) Then
                Me.RefreshConfigCacheOperationCompleted = AddressOf Me.OnRefreshConfigCacheOperationCompleted
            End If
            Me.InvokeAsync("RefreshConfigCache", New Object() {VirtualServerId, AdminGroupChanged}, Me.RefreshConfigCacheOperationCompleted, userState)
        End Sub
        
        Private Sub OnRefreshConfigCacheOperationCompleted(ByVal arg As Object)
            If (Not (Me.RefreshConfigCacheCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RefreshConfigCacheCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub CreateSiteCompletedEventHandler(ByVal sender As Object, ByVal e As CreateSiteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateSiteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub DeleteSiteCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetLanguagesCompletedEventHandler(ByVal sender As Object, ByVal e As GetLanguagesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLanguagesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub RefreshConfigCacheCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
End Namespace
