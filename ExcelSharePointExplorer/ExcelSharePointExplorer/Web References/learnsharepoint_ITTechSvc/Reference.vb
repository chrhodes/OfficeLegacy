'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4016
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4016.
'
Namespace learnsharepoint_ITTechSvc
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ViewsSoap", [Namespace]:="http://schemas.microsoft.com/sharepoint/soap/")>  _
    Partial Public Class Views
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetViewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetViewHtmlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteViewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddViewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetViewCollectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateViewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateViewHtmlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateViewHtml2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.ExcelSharePointExplorer.MySettings.Default.ExcelSharePointExplorer_learnsharepoint_ITTechSvc_Lists
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetViewCompleted As GetViewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetViewHtmlCompleted As GetViewHtmlCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteViewCompleted As DeleteViewCompletedEventHandler
        
        '''<remarks/>
        Public Event AddViewCompleted As AddViewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetViewCollectionCompleted As GetViewCollectionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateViewCompleted As UpdateViewCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateViewHtmlCompleted As UpdateViewHtmlCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateViewHtml2Completed As UpdateViewHtml2CompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetView", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetView(ByVal listName As String, ByVal viewName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetView", New Object() {listName, viewName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetViewAsync(ByVal listName As String, ByVal viewName As String)
            Me.GetViewAsync(listName, viewName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetViewAsync(ByVal listName As String, ByVal viewName As String, ByVal userState As Object)
            If (Me.GetViewOperationCompleted Is Nothing) Then
                Me.GetViewOperationCompleted = AddressOf Me.OnGetViewOperationCompleted
            End If
            Me.InvokeAsync("GetView", New Object() {listName, viewName}, Me.GetViewOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetViewOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetViewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetViewCompleted(Me, New GetViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetViewHtml", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetViewHtml(ByVal listName As String, ByVal viewName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetViewHtml", New Object() {listName, viewName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetViewHtmlAsync(ByVal listName As String, ByVal viewName As String)
            Me.GetViewHtmlAsync(listName, viewName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetViewHtmlAsync(ByVal listName As String, ByVal viewName As String, ByVal userState As Object)
            If (Me.GetViewHtmlOperationCompleted Is Nothing) Then
                Me.GetViewHtmlOperationCompleted = AddressOf Me.OnGetViewHtmlOperationCompleted
            End If
            Me.InvokeAsync("GetViewHtml", New Object() {listName, viewName}, Me.GetViewHtmlOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetViewHtmlOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetViewHtmlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetViewHtmlCompleted(Me, New GetViewHtmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/DeleteView", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteView(ByVal listName As String, ByVal viewName As String)
            Me.Invoke("DeleteView", New Object() {listName, viewName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteViewAsync(ByVal listName As String, ByVal viewName As String)
            Me.DeleteViewAsync(listName, viewName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteViewAsync(ByVal listName As String, ByVal viewName As String, ByVal userState As Object)
            If (Me.DeleteViewOperationCompleted Is Nothing) Then
                Me.DeleteViewOperationCompleted = AddressOf Me.OnDeleteViewOperationCompleted
            End If
            Me.InvokeAsync("DeleteView", New Object() {listName, viewName}, Me.DeleteViewOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteViewOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteViewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteViewCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/AddView", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddView(ByVal listName As String, ByVal viewName As String, ByVal viewFields As System.Xml.XmlNode, ByVal query As System.Xml.XmlNode, ByVal rowLimit As System.Xml.XmlNode, ByVal type As String, ByVal makeViewDefault As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AddView", New Object() {listName, viewName, viewFields, query, rowLimit, type, makeViewDefault})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddViewAsync(ByVal listName As String, ByVal viewName As String, ByVal viewFields As System.Xml.XmlNode, ByVal query As System.Xml.XmlNode, ByVal rowLimit As System.Xml.XmlNode, ByVal type As String, ByVal makeViewDefault As Boolean)
            Me.AddViewAsync(listName, viewName, viewFields, query, rowLimit, type, makeViewDefault, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddViewAsync(ByVal listName As String, ByVal viewName As String, ByVal viewFields As System.Xml.XmlNode, ByVal query As System.Xml.XmlNode, ByVal rowLimit As System.Xml.XmlNode, ByVal type As String, ByVal makeViewDefault As Boolean, ByVal userState As Object)
            If (Me.AddViewOperationCompleted Is Nothing) Then
                Me.AddViewOperationCompleted = AddressOf Me.OnAddViewOperationCompleted
            End If
            Me.InvokeAsync("AddView", New Object() {listName, viewName, viewFields, query, rowLimit, type, makeViewDefault}, Me.AddViewOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddViewOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddViewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddViewCompleted(Me, New AddViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetViewCollection", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetViewCollection(ByVal listName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetViewCollection", New Object() {listName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetViewCollectionAsync(ByVal listName As String)
            Me.GetViewCollectionAsync(listName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetViewCollectionAsync(ByVal listName As String, ByVal userState As Object)
            If (Me.GetViewCollectionOperationCompleted Is Nothing) Then
                Me.GetViewCollectionOperationCompleted = AddressOf Me.OnGetViewCollectionOperationCompleted
            End If
            Me.InvokeAsync("GetViewCollection", New Object() {listName}, Me.GetViewCollectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetViewCollectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetViewCollectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetViewCollectionCompleted(Me, New GetViewCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/UpdateView", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateView(ByVal listName As String, ByVal viewName As String, ByVal viewProperties As System.Xml.XmlNode, ByVal query As System.Xml.XmlNode, ByVal viewFields As System.Xml.XmlNode, ByVal aggregations As System.Xml.XmlNode, ByVal formats As System.Xml.XmlNode, ByVal rowLimit As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateView", New Object() {listName, viewName, viewProperties, query, viewFields, aggregations, formats, rowLimit})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateViewAsync(ByVal listName As String, ByVal viewName As String, ByVal viewProperties As System.Xml.XmlNode, ByVal query As System.Xml.XmlNode, ByVal viewFields As System.Xml.XmlNode, ByVal aggregations As System.Xml.XmlNode, ByVal formats As System.Xml.XmlNode, ByVal rowLimit As System.Xml.XmlNode)
            Me.UpdateViewAsync(listName, viewName, viewProperties, query, viewFields, aggregations, formats, rowLimit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateViewAsync(ByVal listName As String, ByVal viewName As String, ByVal viewProperties As System.Xml.XmlNode, ByVal query As System.Xml.XmlNode, ByVal viewFields As System.Xml.XmlNode, ByVal aggregations As System.Xml.XmlNode, ByVal formats As System.Xml.XmlNode, ByVal rowLimit As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.UpdateViewOperationCompleted Is Nothing) Then
                Me.UpdateViewOperationCompleted = AddressOf Me.OnUpdateViewOperationCompleted
            End If
            Me.InvokeAsync("UpdateView", New Object() {listName, viewName, viewProperties, query, viewFields, aggregations, formats, rowLimit}, Me.UpdateViewOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateViewOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateViewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateViewCompleted(Me, New UpdateViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/UpdateViewHtml", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateViewHtml(ByVal listName As String, ByVal viewName As String, ByVal viewProperties As System.Xml.XmlNode, ByVal toolbar As System.Xml.XmlNode, ByVal viewHeader As System.Xml.XmlNode, ByVal viewBody As System.Xml.XmlNode, ByVal viewFooter As System.Xml.XmlNode, ByVal viewEmpty As System.Xml.XmlNode, ByVal rowLimitExceeded As System.Xml.XmlNode, ByVal query As System.Xml.XmlNode, ByVal viewFields As System.Xml.XmlNode, ByVal aggregations As System.Xml.XmlNode, ByVal formats As System.Xml.XmlNode, ByVal rowLimit As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateViewHtml", New Object() {listName, viewName, viewProperties, toolbar, viewHeader, viewBody, viewFooter, viewEmpty, rowLimitExceeded, query, viewFields, aggregations, formats, rowLimit})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateViewHtmlAsync(ByVal listName As String, ByVal viewName As String, ByVal viewProperties As System.Xml.XmlNode, ByVal toolbar As System.Xml.XmlNode, ByVal viewHeader As System.Xml.XmlNode, ByVal viewBody As System.Xml.XmlNode, ByVal viewFooter As System.Xml.XmlNode, ByVal viewEmpty As System.Xml.XmlNode, ByVal rowLimitExceeded As System.Xml.XmlNode, ByVal query As System.Xml.XmlNode, ByVal viewFields As System.Xml.XmlNode, ByVal aggregations As System.Xml.XmlNode, ByVal formats As System.Xml.XmlNode, ByVal rowLimit As System.Xml.XmlNode)
            Me.UpdateViewHtmlAsync(listName, viewName, viewProperties, toolbar, viewHeader, viewBody, viewFooter, viewEmpty, rowLimitExceeded, query, viewFields, aggregations, formats, rowLimit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateViewHtmlAsync(ByVal listName As String, ByVal viewName As String, ByVal viewProperties As System.Xml.XmlNode, ByVal toolbar As System.Xml.XmlNode, ByVal viewHeader As System.Xml.XmlNode, ByVal viewBody As System.Xml.XmlNode, ByVal viewFooter As System.Xml.XmlNode, ByVal viewEmpty As System.Xml.XmlNode, ByVal rowLimitExceeded As System.Xml.XmlNode, ByVal query As System.Xml.XmlNode, ByVal viewFields As System.Xml.XmlNode, ByVal aggregations As System.Xml.XmlNode, ByVal formats As System.Xml.XmlNode, ByVal rowLimit As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.UpdateViewHtmlOperationCompleted Is Nothing) Then
                Me.UpdateViewHtmlOperationCompleted = AddressOf Me.OnUpdateViewHtmlOperationCompleted
            End If
            Me.InvokeAsync("UpdateViewHtml", New Object() {listName, viewName, viewProperties, toolbar, viewHeader, viewBody, viewFooter, viewEmpty, rowLimitExceeded, query, viewFields, aggregations, formats, rowLimit}, Me.UpdateViewHtmlOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateViewHtmlOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateViewHtmlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateViewHtmlCompleted(Me, New UpdateViewHtmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/UpdateViewHtml2", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateViewHtml2(ByVal listName As String, ByVal viewName As String, ByVal viewProperties As System.Xml.XmlNode, ByVal toolbar As System.Xml.XmlNode, ByVal viewHeader As System.Xml.XmlNode, ByVal viewBody As System.Xml.XmlNode, ByVal viewFooter As System.Xml.XmlNode, ByVal viewEmpty As System.Xml.XmlNode, ByVal rowLimitExceeded As System.Xml.XmlNode, ByVal query As System.Xml.XmlNode, ByVal viewFields As System.Xml.XmlNode, ByVal aggregations As System.Xml.XmlNode, ByVal formats As System.Xml.XmlNode, ByVal rowLimit As System.Xml.XmlNode, ByVal openApplicationExtension As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateViewHtml2", New Object() {listName, viewName, viewProperties, toolbar, viewHeader, viewBody, viewFooter, viewEmpty, rowLimitExceeded, query, viewFields, aggregations, formats, rowLimit, openApplicationExtension})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateViewHtml2Async(ByVal listName As String, ByVal viewName As String, ByVal viewProperties As System.Xml.XmlNode, ByVal toolbar As System.Xml.XmlNode, ByVal viewHeader As System.Xml.XmlNode, ByVal viewBody As System.Xml.XmlNode, ByVal viewFooter As System.Xml.XmlNode, ByVal viewEmpty As System.Xml.XmlNode, ByVal rowLimitExceeded As System.Xml.XmlNode, ByVal query As System.Xml.XmlNode, ByVal viewFields As System.Xml.XmlNode, ByVal aggregations As System.Xml.XmlNode, ByVal formats As System.Xml.XmlNode, ByVal rowLimit As System.Xml.XmlNode, ByVal openApplicationExtension As String)
            Me.UpdateViewHtml2Async(listName, viewName, viewProperties, toolbar, viewHeader, viewBody, viewFooter, viewEmpty, rowLimitExceeded, query, viewFields, aggregations, formats, rowLimit, openApplicationExtension, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateViewHtml2Async( _
                    ByVal listName As String,  _
                    ByVal viewName As String,  _
                    ByVal viewProperties As System.Xml.XmlNode,  _
                    ByVal toolbar As System.Xml.XmlNode,  _
                    ByVal viewHeader As System.Xml.XmlNode,  _
                    ByVal viewBody As System.Xml.XmlNode,  _
                    ByVal viewFooter As System.Xml.XmlNode,  _
                    ByVal viewEmpty As System.Xml.XmlNode,  _
                    ByVal rowLimitExceeded As System.Xml.XmlNode,  _
                    ByVal query As System.Xml.XmlNode,  _
                    ByVal viewFields As System.Xml.XmlNode,  _
                    ByVal aggregations As System.Xml.XmlNode,  _
                    ByVal formats As System.Xml.XmlNode,  _
                    ByVal rowLimit As System.Xml.XmlNode,  _
                    ByVal openApplicationExtension As String,  _
                    ByVal userState As Object)
            If (Me.UpdateViewHtml2OperationCompleted Is Nothing) Then
                Me.UpdateViewHtml2OperationCompleted = AddressOf Me.OnUpdateViewHtml2OperationCompleted
            End If
            Me.InvokeAsync("UpdateViewHtml2", New Object() {listName, viewName, viewProperties, toolbar, viewHeader, viewBody, viewFooter, viewEmpty, rowLimitExceeded, query, viewFields, aggregations, formats, rowLimit, openApplicationExtension}, Me.UpdateViewHtml2OperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateViewHtml2OperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateViewHtml2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateViewHtml2Completed(Me, New UpdateViewHtml2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")>  _
    Public Delegate Sub GetViewCompletedEventHandler(ByVal sender As Object, ByVal e As GetViewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetViewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")>  _
    Public Delegate Sub GetViewHtmlCompletedEventHandler(ByVal sender As Object, ByVal e As GetViewHtmlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetViewHtmlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")>  _
    Public Delegate Sub DeleteViewCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")>  _
    Public Delegate Sub AddViewCompletedEventHandler(ByVal sender As Object, ByVal e As AddViewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddViewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")>  _
    Public Delegate Sub GetViewCollectionCompletedEventHandler(ByVal sender As Object, ByVal e As GetViewCollectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetViewCollectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")>  _
    Public Delegate Sub UpdateViewCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateViewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateViewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")>  _
    Public Delegate Sub UpdateViewHtmlCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateViewHtmlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateViewHtmlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")>  _
    Public Delegate Sub UpdateViewHtml2CompletedEventHandler(ByVal sender As Object, ByVal e As UpdateViewHtml2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateViewHtml2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
End Namespace
